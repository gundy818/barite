#
#
require "../exception"
require "./lifecycle_rule"
require "crest"
require "digest/sha1"
require "json"


module Barite
  module B2
    # Represents a bucket on Backblaze.
    # This is normally generated by calling B2#bucket.
    # Once you have this object you can set lifecycle rules, etc.
    class Bucket
      # The linked B2 object.
      getter b2

      @lifecycle_rules : Array(Barite::B2::LifecycleRule)?

      # The bucket name.
      getter bucket_name

      @bucket_id : String?

      # Create a reference for the named bucket.
      def initialize(@b2 : Barite::B2::API, @bucket_name : String)
        @bucket_id = nil
      end

      # Retrieve the bucket ID.
      # Caches the result on first use.
      def bucket_id() : String
        @bucket_id ||= @b2.get_bucket_id(@bucket_name)

        return @bucket_id.as(String)
      end

      def bucket_id=(@bucket_id)
      end

      # Updates the bucket properties passed.
      # Updates the local cached version of @lifecycls_rules.
      def update(lifecycle_rules : Array(Barite::B2::LifecycleRule))
        content = {
          "accountId" => @b2.account_id(),
          "bucketId" => bucket_id(),
          "lifecycleRules" => lifecycle_rules.map {|r| r.to_hash()}
        }

        begin
          response = @b2.api_post("b2_update_bucket",
                                  headers: {
                                    "Authorization" => @b2.api_token(),
                                  },
                                  body: content.to_json)
        rescue ex : Crest::Unauthorized
          raise Barite::NotAuthorisedException.new("Error updating bucket: #{ex.message}")
        end

        # data = JSON.parse(response.body)
        return response
      end
    end
  end
end

